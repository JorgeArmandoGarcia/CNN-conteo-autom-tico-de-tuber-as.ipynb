# Se deben ajustar las veriones
!pip install tensorflow==1.14.0
!pip install keras==2.3.0
!pip install numpy==1.16.1

# Clonar el repositorio de keras-retinanet
!git clone https://github.com/DavidReveloLuna/keras-retinanet.git

cd keras-retinanet/

!pip install .

!python setup.py build_ext --inplace

# Librerias

import numpy as np
import pandas as pd
import seaborn as sns
from pylab import rcParams
import matplotlib.pyplot as plt
from matplotlib import rc
from pandas.plotting import register_matplotlib_converters
from sklearn.model_selection import train_test_split
import urllib
import os
import csv
import cv2
import time

from PIL import Image
from collections import Counter
from keras.models import load_model
from keras_retinanet import models
from keras_retinanet.utils.image import read_image_bgr, preprocess_image, resize_image
from keras_retinanet.utils.visualization import draw_box, draw_caption
from keras_retinanet.utils.colors import label_color


# Descargar modelo preentrenado resnet50_coco
URL_MODEL = 'https://github.com/fizyr/keras-retinanet/releases/download/0.5.1/resnet50_coco_best_v2.1.0.h5'
urllib.request.urlretrieve(URL_MODEL, './snapshots/model.h5')


!chmod 777 keras_retinanet/bin/*
!keras_retinanet/bin/train.py 
--freeze-backbone --random-transform --weights snapshots/resnet50_csv_10.h5 --batch-size 8 --steps 25 --epochs 10 csv annotations.csv classes.csv



# Con el modelo ya entrenado vamos se realizan predicciones
# Se Carga el modelo entrenado, y se configura para que sea compatible con retinanet
model_path = os.path.join('snapshots', sorted(os.listdir('snapshots'), reverse=True)[0])
print(model_path)

model = models.load_model(model_path, backbone_name='resnet50')
model = models.convert_model(model)


# Cargamos el archivo que contiene las etiquetas de las clases
labels_to_names = pd.read_csv('classes.csv', header=None).T.loc[0].to_dict()


# Cargamos el archivo que contiene la información del dataset de prueba (annotations_test.csv)
test_df = pd.read_csv("annotations_test.csv")
test_df.head()


# Obtenemos la predicción del modelo: boxes, scores, labels
import skimage.io as io

def predict(image):
  image = preprocess_image(image.copy())
  image, scale = resize_image(image)

  boxes, scores, labels = model.predict_on_batch(
    np.expand_dims(image, axis=0)
  )

  boxes /= scale

  return boxes, scores, labels



# Mostramos los objetos encontrardos en la imagen
# Se toman encuenta sólo los objetos que tienen asociada una probabilidad mayor a umbralScore
umbralScore = 0.8

def draw_detections(image, boxes, scores, labels):
  
  for box, score, label in zip(boxes[0], scores[0], labels[0]):
    if score < umbralScore:
      
      break
     
    color = label_color(label)

    b = box.astype(int)
    draw_box(image, b, color=color)

    caption = "{} {:.3f}".format(labels_to_names[label], score)
    draw_caption(image, b, caption)
  
draw_detections   



# Se recorre el dataframe para revisar las predicciones y se guarda la información en un archivo excel
cont1=0
acum=0
tubos=[]
for index, row in test_df.iterrows():
  
  check = cont1+1 in test_df.index
  if check:
    aux1=test_df.iloc[test_df.index.get_loc(cont1), 0]
    aux2=test_df.iloc[test_df.index.get_loc(cont1+1), 0]

    cont1=cont1+1
    acum=acum+1

    if aux1!=aux2:
      print("La imágen------------>"+aux1+"<-----------Tiene",acum,"Tubos")
      acum=0
      image = io.imread(row[0])
      boxes, scores, labels = predict(image)
      condicion=scores >0.8
      cumplen_condicion=np.sum(condicion)
      draw = image.copy()
      draw_detections(draw, boxes, scores, labels)
      plt.axis('off')
      plt.imshow(draw)
      plt.show()
      print("Se encontraron",cumplen_condicion,"Tubos en la imágen")
      print("--------------")
      print("--------------")
      print("--------------")
      tubos.append(cumplen_condicion)
      

  else:
    print("La imágen------------>"+aux2+"<-----------Tiene",acum+1,"Tubos")
    image = io.imread(row[0])
    boxes, scores, labels = predict(image)
    condicion=scores >0.8
    cumplen_condicion=np.sum(condicion)
    draw = image.copy()
    draw_detections(draw, boxes, scores, labels)
    plt.axis('off')
    plt.imshow(draw)
    plt.show()
    print("Se encontraron",cumplen_condicion,"Tubos en la imágen")
    print("--------------")
    print("--------------")
    print("--------------")
    tubos.append(cumplen_condicion)
    
InvTubos = pd.DataFrame(tubos)
InvTubos.to_excel('InvTubos.xlsx', sheet_name='Inventario')
TotalTubos=InvTubos[0].sum()
print("Se contó un total de:",TotalTubos,"Tubos")